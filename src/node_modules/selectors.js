import R from 'ramda'



export const getWatchById = (state,id) => R.prop(id, state.watches)

export const getWatches = (state,ownProps) => {
    const activeCategoryId = getActiveCategoryId(ownProps)
    //const watches = R.map(id => getWatchById(state,id),state.watchesPage.ids)
    //return watches
    const applySearch = item => R.contains(
        state.watchesPage.search,
        R.prop('name',item)
    )

    const applyCategory = item => R.equals(
        activeCategoryId,
        R.prop('categoryId', item)
    )

    const watches = R.compose(
        R.filter(applySearch),
        R.when(R.always(activeCategoryId), R.filter(applyCategory)),
        R.map(id => getWatchById(state,id))
    )(state.watchesPage.ids)

    return watches
}

export const getRenderedWatchesLength = state => R.length(state.watchesPage.ids)


export const getTotalCartCount = state => R.length(state.cart)

export const getTotalCartPrice = state => {
    const totalPrice = R.compose(
        R.sum(),
        R.pluck('price'),
        R.map(id => getWatchById(state,id))
    )(state.cart)

    return totalPrice
}

export const getCategories = state => R.values(state.categories)

export const getActiveCategoryId = ownProps => R.path(['params','id'],ownProps)

export const getCartWatchesWithCount = state => {
    
    const watchCount = id => R.compose(
        R.length,
        R.filter(cartId => R.equals(id,cartId))
    )(state.cart)
    const watchWithCount = watch => R.assoc('count',watchCount(watch.id),watch)

    const uniqueIds = R.uniq(state.cart)
    const watches = R.compose(
        R.map(watchWithCount),
        R.map(id => getWatchById(state,id))
    )(uniqueIds)
    return watches
}